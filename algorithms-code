import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;

public class SortingAlgorithms {

	public static void main(String[] args) {
		//create random array
		int[] myArray = new int[50000];
		int length = myArray.length;
		int min = 1;
		for (int i = 0; i < length; i++) {
			myArray[i] = min + (int)(Math.random() * ((length - min) + 1));
		}
		
		SelectionSort selection = new SelectionSort();
		InsertionSort insertion = new InsertionSort();
		QuickSort quick = new QuickSort();
		MergeSort merge = new MergeSort();
		HeapSort heap = new HeapSort();
		RadixSort radix = new RadixSort();
		
		Scanner input = new Scanner(System.in);
		System.out.println("Would you like to: ");
		System.out.println("1. Sort in order\n2. Sort in reverse order\n3. Sort 20% through\n4. Sort 80% through");
		int choice = input.nextInt();
		
		// sort in order
		if (choice == 1) {
			// selection sort
			selection.setStartTime();
			selection.sortInOrder();
			selection.setEndTime();
			System.out.println(selection.toString());
			
			// insertion sort
			insertion.setStartTime();
			insertion.sortInOrder();
			insertion.setEndTime();
			System.out.println(insertion.toString());
			
			// quick sort
			quick.setStartTime();
			quick.sortInOrder(0, myArray.length - 1);
			quick.setEndTime();
			System.out.println(quick.toString());
			
			// merge sort
			merge.setStartTime();
			merge.sortInOrder(0, myArray.length - 1);
			merge.setEndTime();
			System.out.println(merge.toString());
			
			 // heap sort
			heap.setStartTime();
			heap.sortInOrder();
			heap.setEndTime();
			System.out.println(heap.toString());
			
			// radix sort
			radix.setStartTime();
			radix.sortInOrder();
			radix.setEndTime();
			System.out.println(radix.toString());
		}
		
		// sort in reverse order
		else if (choice == 2) {
			// selection sort
			selection.setStartTime();
			selection.sortInReverseOrder();
			selection.setEndTime();
			System.out.println(selection.toString());
			
			// insertion sort
			insertion.setStartTime();
			insertion.sortInReverseOrder();
			insertion.setEndTime();
			System.out.println(insertion.toString());			
			
			// quick sort
			quick.setStartTime();
			quick.sortInReverseOrder(0, myArray.length - 1);
			quick.setEndTime();
			System.out.println(quick.toString());
			
			// merge sort
			merge.setStartTime();
			merge.sortInReverseOrder(0, myArray.length-1);
			merge.setEndTime();
			System.out.println(merge.toString());
			
			// heap sort
			heap.setStartTime();
			heap.sortInReverseOrder();
			heap.setEndTime();
			System.out.println(heap.toString());
			
			// radix sort
			radix.setStartTime();
			radix.sortInReverseOrder();
			radix.setEndTime();
			System.out.println(radix.toString());
		}
		
		// sort 20% through
		else if (choice ==3) {
			// selection sort
			selection.setStartTime();
			selection.sort_20Percent();
			selection.setEndTime();
			System.out.println(selection.toString());

			// insertion sort
			insertion.setStartTime();
			insertion.sort_20Percent();
			insertion.setEndTime();
			System.out.println(insertion.toString());			
			
			// quick sort
			quick.setStartTime();
			quick.sort_20Percent(0, myArray.length - 1);
			quick.setEndTime();
			System.out.println(quick.toString());
			
			// merge sort
			merge.setStartTime();
			merge.sort_20Percent(0, myArray.length-1);
			merge.setEndTime();
			System.out.println(merge.toString());
			
			// heap sort
			heap.setStartTime();
			heap.sort_20Percent();
			heap.setEndTime();
			System.out.println(heap.toString());
			
			// radix sort
			radix.setStartTime();
			radix.sort_20Percent();
			radix.setEndTime();
			System.out.println(radix.toString());
			
		}
		
		// sort 80% through
		else {
			// selection sort
			selection.setStartTime();
			selection.sort_80Percent();
			selection.setEndTime();
			System.out.println(selection.toString());

			// insertion sort
			insertion.setStartTime();
			insertion.sort_80Percent();
			insertion.setEndTime();
			System.out.println(insertion.toString());			
			
			// quick sort
			quick.setStartTime();
			quick.sort_80Percent(0, myArray.length - 1);
			quick.setEndTime();
			System.out.println(quick.toString());
			
			// merge sort
			merge.setStartTime();
			merge.sort_80Percent(0, myArray.length-1);
			merge.setEndTime();
			System.out.println(merge.toString());
			
			// heap sort
			heap.setStartTime();
			heap.sort_80Percent();
			heap.setEndTime();
			System.out.println(heap.toString());
			
			// radix sort
			radix.setStartTime();
			radix.sort_80Percent();
			radix.setEndTime();
			System.out.println(radix.toString());
		}
		
		// create array list of sort times
		ArrayList<Long> time_to_sort = new ArrayList<>();
		time_to_sort.add(0, selection.getSortTime());
		time_to_sort.add(1, insertion.getSortTime());
		time_to_sort.add(2, quick.getSortTime());
		time_to_sort.add(3, merge.getSortTime());
		time_to_sort.add(4, heap.getSortTime());
		time_to_sort.add(5, radix.getSortTime());
		
		// create array list of comparisons
		ArrayList<Long> comparisons_to_sort = new ArrayList<>();
		comparisons_to_sort.add(0, selection.getComparisons());
		comparisons_to_sort.add(1, insertion.getComparisons());
		comparisons_to_sort.add(2, quick.getComparisons());
		comparisons_to_sort.add(3, merge.getComparisons());
		comparisons_to_sort.add(4, heap.getComparisons());
		comparisons_to_sort.add(5, radix.getComparisons());
		
		// create array list of movements
		ArrayList<Long> movements_to_sort = new ArrayList<>();
		movements_to_sort.add(0, selection.getMovements());
		movements_to_sort.add(1, insertion.getMovements());
		movements_to_sort.add(2, quick.getMovements());
		movements_to_sort.add(3, merge.getMovements());
		movements_to_sort.add(4, heap.getMovements());
		movements_to_sort.add(5, radix.getMovements());
		
		String winner_time = getWinner(time_to_sort);
		String winner_comparisons = getWinner(comparisons_to_sort);
		String winner_movements = getWinner(movements_to_sort);
		
		System.out.println("\nThe winning algorithm based on time is " + winner_time + ".");
		System.out.println("The winning algorithm based on comparisons is " + winner_comparisons + ".");
		System.out.println("The winning algorithm based on movements is " + winner_movements + ".");
		
	}
	
	public static String getWinner(ArrayList<Long> algorithms) {
		// find minimum value
		long minimum = algorithms.get(0);
		
		for (int i = 1; i < algorithms.size(); i++) {
			if(algorithms.get(i) < minimum) {
				minimum = algorithms.get(i);
			}
		}
		
		// get index of minimum value
		int winner = algorithms.indexOf(minimum);
		
		// find which algorithm is at that index
		String winningAlgorithm = " ";
		switch(winner) {
		case 0: winningAlgorithm = "selection sort";
		break;
		case 1: winningAlgorithm = "insertion sort";
		break;
		case 2: winningAlgorithm = "quick sort";
		break;
		case 3: winningAlgorithm = "merge sort";
		break;
		case 4: winningAlgorithm = "heap sort";
		break;
		default: winningAlgorithm = "radix sort";
		}
		
		return winningAlgorithm;
	}
}	
	
class SelectionSort {
	private long comparisons = 0;
	private long movements = 0;
	private long startTime = 0;
	private long endTime = 0;
	private long sortTime = 0;
	private int[] array = new int[50000];
	int length = array.length;
	private int[] array20PercentSorted = new int[250000];
	private int[] array80PercentSorted = new int[62500];
	
	// constructor
	SelectionSort() {
		this.comparisons = 0;
		this.movements = 0;
		// initialize array
		for (int i = 0; i < length; i++) {
			int min = 1;
			array[i] = min + (int)(Math.random() * ((length - min) + 1));
		}
	}
	
	// method to sort in order
	public void sortInOrder() {
		for (int q = 0; q < array.length - 1; q++) {
			int index = q;
			
			for (int j = q + 1; j < array.length - 1; j++) {
				if(array[j] < array[index]) {
					index = j;
					this.comparisons++;
				}
			}
			
			int smallerNum = array[index];
			array[index] = array[q];
			array[q] = smallerNum;
			this.movements++;
		}
	}
	
	// method to sort in reverse order
	public void sortInReverseOrder() {
		for (int m = 0; m < array.length; m++) {
			int max = m;
			for (int j = m + 1; j < array.length; j++) {
				if (array[j] > array[max]) {
					max = j;
					this.comparisons++;
				}
			}
			
			if (max != 1) {
				int biggerNumber = array[m];
				array[m] = array[max];
				array[max] = biggerNumber;
				this.movements++;
			}
		}
	}
	
	// method to sort 20 percent through
	public void sort_20Percent() {
		//first, sort in order
		for (int q = 0; q < array.length - 1; q++) {
			int index = q;
			
			for (int j = q + 1; j < array.length - 1; j++) {
				if(array[j] < array[index]) {
					index = j;
					this.comparisons++;
				}
			}
			
			int smallerNum = array[index];
			array[index] = array[q];
			array[q] = smallerNum;
			this.movements++;
		}
		
		// now, convert array to array list
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < length; i++) {
			list.add(array[i]);
		}
		
		int min = 1;
		
		// now, add 200,000 random elements
		for (int z = length; z < 200000; z++) {
			list.add(z, min + (int)(Math.random() * ((length - min) + 1)));
		}
				
		// now, copy list back to array
		for (int y = 0; y < list.size(); y++) {
			array20PercentSorted[y] = list.get(y);
		}
	}
	
	// method to sort 80 percent through
	public void sort_80Percent() {
		//first, sort in order
		for (int q = 0; q < array.length - 1; q++) {
			int index = q;
					
			for (int j = q + 1; j < array.length - 1; j++) {
				this.comparisons++;
				if(array[j] < array[index]) {
					index = j;
				}
			}
					
			int smallerNum = array[index];
			array[index] = array[q];
			array[q] = smallerNum;
			this.movements++;
		}
				
		// now, convert array to array list
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < length; i++) {
			list.add(array[i]);
		}
				
		int min = 1;
				
		// now, add 12,500 random elements
		for (int z = length; z < 12500; z++) {
			list.add(z, min + (int)(Math.random() * ((length - min) + 1)));
		}
						
		// now, copy list back to array
		for (int y = 0; y < list.size(); y++) {
			array80PercentSorted[y] = list.get(y);
		}
	}
	
	
	// setters
	public void setStartTime() {
		this.startTime = System.nanoTime();
	}
	
	public void setEndTime() {
		this.endTime = System.nanoTime();
	}
	
	// getters
	public long getComparisons() {
		return this.comparisons;
	}
	
	public long getMovements() {
		return this.movements;
	}
	
	public long getStartTime() {
		return this.startTime;
	}
	
	public long getEndTime() {
		return this.endTime;
	}
	
	public long getSortTime() {
		this.sortTime = TimeUnit.MILLISECONDS.convert(this.getEndTime() - this.getStartTime(), TimeUnit.NANOSECONDS);
		return this.sortTime;
	}
	
	// toString
	public String toString() {
		return "\nSELECTION SORT\nComparisons: " + this.getComparisons() + "\nMovements: "
				+ this.getMovements() + "\nSort time: " + this.getSortTime() + " milliseconds";
	}
	
}


class InsertionSort {
	private long comparisons = 0;
	private long movements = 0;
	private long startTime = 0;
	private long endTime = 0;
	private long sortTime = 0;
	private int[] array = new int[50000];
	int length = array.length;
	private int[] array20PercentSorted = new int[250000];
	private int[] array80PercentSorted = new int[62500];
	
	// constructor
	InsertionSort() {
		this.comparisons = 0;
		this.movements = 0;
		// initialize array
		for (int i = 0; i < length; i++) {
			int min = 1;
			array[i] = min + (int)(Math.random() * ((length - min) + 1));
		}
	}
	
	// method to sort in order
	public void sortInOrder() {
		for (int i = 1; i < array.length; i ++) {
			int j = i;
			this.comparisons++;
			while ((j>0) && (array[j-1] > array[j])) {
				if (array[j-1] > array[j]) {
					this.comparisons++;
				}
				
				int temp = array[j-1];
				array[j-1] = array[j];
				array[j] = temp;
				j--;
				this.movements++;
			}
		}
	}
	
	// method to sort in reverse order
	public void sortInReverseOrder() {
		for (int i = 1; i < array.length; i++) {
			int j = i;
			this.comparisons++;
			while ((j>0) && (array[j-1] < array[j])) {
				if (array[j-1] < array[j]) {
					this.comparisons++;
				}
				
				int temp = array[j-1];
				array[j-1] = array[j];
				array[j] = temp;
				j--;
				this.movements++;
			}
		}
	}
	
	// method to sort 20% through
	public void sort_20Percent() {
		// first, sort array
		for (int i = 1; i < array.length; i ++) {
			int j = i;
			this.comparisons++;
			while ((j>0) && (array[j-1] > array[j])) {
				if (array[j-1] > array[j]) {
					this.comparisons++;
				}
				
				int temp = array[j-1];
				array[j-1] = array[j];
				array[j] = temp;
				j--;
				this.movements++;
			}
		}
		
		// now, convert array to array list
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < length; i++) {
			list.add(array[i]);
		}
				
		int min = 1;
		
		// now, add 200,000 random elements
		for (int z = length; z < 200000; z++) {
			list.add(z, min + (int)(Math.random() * ((length - min) + 1)));
		}
						
		// now, copy list back to array
		for (int y = 0; y < list.size(); y++) {
			array20PercentSorted[y] = list.get(y);
		}
	}
	
	// method to sort 80% through
	public void sort_80Percent() {
		// first, sort array
		for (int i = 1; i < array.length; i ++) {
			int j = i;
			this.comparisons++;
			while ((j>0) && (array[j-1] > array[j])) {
				if (array[j-1] > array[j]) {
					this.comparisons++;
				}
				
				int temp = array[j-1];
				array[j-1] = array[j];
				array[j] = temp;
				j--;
				this.movements++;
			}
		}

		// now, convert array to array list
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < length; i++) {
			list.add(array[i]);
		}
				
		int min = 1;
		
		// now, add 12,500 random elements
		for (int z = length; z < 12500; z++) {
			list.add(z, min + (int)(Math.random() * ((length - min) + 1)));
		}
						
		// now, copy list back to array
		for (int y = 0; y < list.size(); y++) {
			array80PercentSorted[y] = list.get(y);
		}
	}
	
	// setters
	public void setStartTime() {
		this.startTime = System.nanoTime();
	}
	
	public void setEndTime() {
		this.endTime = System.nanoTime();
	}
	
	// getters
	public long getComparisons() {
		return this.comparisons;
	}
		
	public long getMovements() {
		return this.movements;
	}
		
	public long getStartTime() {
		return this.startTime;
	}
	
	public long getEndTime() {
		return this.endTime;
	}
	
	public long getSortTime() {
		this.sortTime = TimeUnit.MILLISECONDS.convert(this.getEndTime() - this.getStartTime(), TimeUnit.NANOSECONDS);
		return this.sortTime;
	}
	
	public void getArray() {
		for (int element : array) {
			System.out.print(element + " ");
		}
	}
	
	// toString
	public String toString() {
		return "\nINSERTION SORT\nComparisons: " + this.getComparisons() + "\nMovements: "
				+ this.getMovements() + "\nSort time: " + this.getSortTime() + " milliseconds";
	}
}


class QuickSort {
	private long comparisons = 0;
	private long movements = 0;
	private long startTime = 0;
	private long endTime = 0;
	private long sortTime = 0;
	private int[] array = new int[50000];
	int length = array.length;
	private int[] array20PercentSorted = new int[250000];
	private int[] array80PercentSorted = new int[62500];
	
	// constructor 
	QuickSort() {
		this.comparisons = 0;
		this.movements = 0;
		// initialize array
		for (int i = 0; i < length; i++) {
			int min = 1;
			array[i] = min + (int)(Math.random() * ((length - min) + 1));
		}
	}
	
	// method to partition in order
	public int partition(int low, int high) {
		int pivot = array[high];
		int i = low - 1;
		
		for (int j = low; j < high; j++) {
			// if current element is smaller than or equal to pivot
			if (array[j] <= pivot) {
				i++;
				int temp = array[i];
				array[i] = array[j];
				array[j] = temp;
				this.comparisons++;
				this.movements++;
			}
		}
			
		int temp = array[i+1];
		array[i+1] = array[high];
		array[high] = temp;
		this.movements++;
		return i+1;
	}
		
		
	// method to sort in order
	public void sortInOrder(int low, int high) {
		if (low < high) {
			int partitionIndex = partition(low, high);
			
			// recursion
			sortInOrder(low, partitionIndex - 1);
			sortInOrder(partitionIndex + 1, high);
		}
	}
	
	// method to sort in reverse order
	public void sortInReverseOrder(int low, int high) {
		// first, sort in order
		if (low < high) {
			int partitionIndex = partition(low, high);
			
			// recursion
			sortInOrder(low, partitionIndex - 1);
			sortInOrder(partitionIndex + 1, high);
		}
		
		// now, convert array to array list
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < length; i++) {
			list.add(array[i]);
		}
				
		// reverse order of list
		Collections.reverse(list);
				
		// now, copy list back to array
		for (int y = 0; y < list.size(); y++) {
			array[y] = list.get(y);
		}
	}
	
	// method to sort 20% through
	public void sort_20Percent(int low, int high) {
		//first, sort array
		if (low < high) {
			int partitionIndex = partition(low, high);
			
			// recursion
			sortInOrder(low, partitionIndex - 1);
			sortInOrder(partitionIndex + 1, high);
		}
		
		// now, convert array to array list
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < length; i++) {
			list.add(array[i]);
		}
						
		int min = 1;
				
		// now, add 200,000 random elements
		for (int z = length; z < 200000; z++) {
			list.add(z, min + (int)(Math.random() * ((length - min) + 1)));
		}
								
		// now, copy list back to array
		for (int y = 0; y < list.size(); y++) {
			array20PercentSorted[y] = list.get(y);
		}
	}
	
	public void sort_80Percent(int low, int high) {
		//first, sort array
		if (low < high) {
			int partitionIndex = partition(low, high);
					
			// recursion
			sortInOrder(low, partitionIndex - 1);
			sortInOrder(partitionIndex + 1, high);
		}
				
		// now, convert array to array list
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < length; i++) {
			list.add(array[i]);
		}
								
		int min = 1;
						
		// now, add 12,500 random elements
		for (int z = length; z < 12500; z++) {
			list.add(z, min + (int)(Math.random() * ((length - min) + 1)));
		}
										
		// now, copy list back to array
		for (int y = 0; y < list.size(); y++) {
			array80PercentSorted[y] = list.get(y);
		}
	}
	
	
	// setters
	public void setStartTime() {
		this.startTime = System.nanoTime();
	}
	
	public void setEndTime() {
		this.endTime = System.nanoTime();
	}
	
	// getters
	public long getComparisons() {
		return this.comparisons;
	}
		
	public long getMovements() {
		return this.movements;
	}
	
	public long getStartTime() {
		return this.startTime;
	}
	
	public long getEndTime() {
		return this.endTime;
	}
	
	public long getSortTime() {
		this.sortTime = TimeUnit.MILLISECONDS.convert(this.getEndTime() - this.getStartTime(), TimeUnit.NANOSECONDS);
		return this.sortTime;
	}
	
	public void getArray() {
		for (int element : array) {
			System.out.print(element + " ");
		}
	}
	
	// toString method
	public String toString() {
		return "\nQUICK SORT\nComparisons: " + this.getComparisons() + "\nMovements: "
				+ this.getMovements() + "\nSort time: " + this.getSortTime() + " milliseconds";
	}
}
	

class MergeSort {
	private long comparisons = 0;
	private long movements = 0;
	private long startTime = 0;
	private long endTime = 0;
	private long sortTime = 0;
	private int[] array = new int[50000];
	int length = array.length;
	private int[] tempMergeArray = new int[length];
	private int[] array20PercentSorted = new int[250000];
	private int[] array80PercentSorted = new int[62500];
	
	// constructor 
	MergeSort() {
		this.comparisons = 0;
		this.movements = 0;
		// initialize array
		for (int i = 0; i < length; i++) {
			int min = 1;
			array[i] = min + (int)(Math.random() * ((length - min) + 1));
		}
	}
	
	// method to merge parts in order
	private void mergeParts(int low, int middle, int high) {
		// set temporary merge array equal to initial array
		for (int i = low; i <= high; i++) {
			tempMergeArray[i] = array[i];
		}
		
		int i = low;
		int j = middle+1;
		int k = low;
		
		while (i <= middle && j <= high) {
			if (tempMergeArray[i] <= tempMergeArray[j]) {
				this.comparisons++;
				array[k] = tempMergeArray[i];
				i++;
				this.movements++;
			}
			
			else {
				array[k] = tempMergeArray[j];
				j++;
				this.movements++;
			}
			
			k++;
		}
		
		while (i <= middle) {
			array[k] = tempMergeArray[i];
			k++;
			i++;
			this.movements++;
		}
	}
	
	// method to sort in order
	public void sortInOrder(int low, int high) {
		if (low < high) {
			int middle = low + (high - low)/2;
			
			//sort left side of array
			sortInOrder(low, middle);
			
			// sort right side of array
			sortInOrder(middle+1, high);
			
			// merge both sides
			mergeParts(low, middle, high);
		}
	}
	
	// method to sort in reverse order
	public void sortInReverseOrder(int low, int high) {
		// first, sort in order
		if (low < high) {
			int middle = low + (high - low)/2;
			
			//sort left side of array
			sortInOrder(low, middle);
			
			// sort right side of array
			sortInOrder(middle+1, high);
			
			// merge both sides
			mergeParts(low, middle, high);
		}
		
		// now, convert array to array list
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < length; i++) {
			list.add(array[i]);
		}
				
		// reverse order of list
		Collections.reverse(list);
				
		// now, copy list back to array
		for (int y = 0; y < list.size(); y++) {
			array[y] = list.get(y);
		}
	}
	
	// method to sort 20% through
	public void sort_20Percent(int low, int high) {
		// first, sort in order
		if (low < high) {
			int middle = low + (high - low)/2;
			
			//sort left side of array
			sortInOrder(low, middle);
			
			// sort right side of array
			sortInOrder(middle+1, high);
			
			// merge both sides
			mergeParts(low, middle, high);
		}
		
		// now, convert array to array list
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < length; i++) {
			list.add(array[i]);
		}
								
		int min = 1;
						
		// now, add 200,000 random elements
		for (int z = length; z < 200000; z++) {
			list.add(z, min + (int)(Math.random() * ((length - min) + 1)));
		}
										
		// now, copy list back to array
		for (int y = 0; y < list.size(); y++) {
			array20PercentSorted[y] = list.get(y);
		}
	}
	
	// method to sort 80% through
	public void sort_80Percent(int low, int high) {
		// first, sort in order
		if (low < high) {
			int middle = low + (high - low)/2;
				
			//sort left side of array
			sortInOrder(low, middle);
				
			// sort right side of array
			sortInOrder(middle+1, high);
				
			// merge both sides
			mergeParts(low, middle, high);
		}
			
		// now, convert array to array list
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < length; i++) {
			list.add(array[i]);
		}
									
		int min = 1;
							
		// now, add 12,500 random elements
		for (int z = length; z < 12500; z++) {
			list.add(z, min + (int)(Math.random() * ((length - min) + 1)));
		}
											
		// now, copy list back to array
		for (int y = 0; y < list.size(); y++) {
			array80PercentSorted[y] = list.get(y);
		}
	}
	
	// setters
	public void setStartTime() {
		this.startTime = System.nanoTime();
	}
	
	public void setEndTime() {
		this.endTime = System.nanoTime();
	}
	
	// getters
	public long getComparisons() {
		return this.comparisons;
	}
	
	public long getMovements() {
		return this.movements;
	}
	
	public long getStartTime() {
		return this.startTime;
	}
	
	public long getEndTime() {
		return this.endTime;
	}
	
	public long getSortTime() {
		this.sortTime = TimeUnit.MILLISECONDS.convert(this.getEndTime() - this.getStartTime(), TimeUnit.NANOSECONDS);
		return this.sortTime;
	}
	
	public void getArray() {
		for (int element : array) {
			System.out.print(element + " ");
		}
	}
	
	// toString method
	public String toString() {
		return "\nMERGE SORT\nComparisons: " + this.getComparisons() + "\nMovements: "
				+ this.getMovements() + "\nSort time: " + this.getSortTime() + " milliseconds";
	}
}


class HeapSort {
	private long comparisons = 0;
	private long movements = 0;
	private long startTime = 0;
	private long endTime = 0;
	private long sortTime = 0;
	private int[] array = new int[50000];
	int length = array.length;
	private static int N = 0;
	private int[] array20PercentSorted = new int[250000];
	private int[] array80PercentSorted = new int[62500];
	
	// Constructor
	HeapSort() {
		this.comparisons = 0;
		this.movements = 0;
		// initialize array
		for (int i = 0; i < length; i++) {
			int min = 1;
			array[i] = min + (int)(Math.random() * ((length - min) + 1));
		}
	}
	
	// method to swap largest element in heap
	public void maxHeap(int q) {
		int left = 2 * q;
		int right = 2 * q + 1;
		int max = q;
		
		if (left <= N && array[left] > array[q]) {
			this.comparisons++;
			max = left;
		}
		
		if (right <= N && array[right] > array[max]) {
			this.comparisons++;
			max = right;
		}
		
		if (max != q) {
			int temp = array[q];
			array[q] = array[max];
			array[max] = temp;
			this.movements++;
			maxHeap(max);
		}
	}
	
	
	// method to build heap in order
	public void heapify() {
		N = array.length - 1;
		
		for (int q = N/2; q >= 0; q--) {
			maxHeap(q);
		}
	}
	
	// method to sort in order
	public void sortInOrder() {
		heapify();
		
		for (int i = N; i > 0; i--) {
			int temp = array[0];
			array[0] = array[i];
			array[i] = temp;
			this.movements++;
			N = N - 1;
			maxHeap(0);
		}
	}
	
	// method to sort in reverse order
	public void sortInReverseOrder() {
		// first, sort in order
		heapify();
		
		for (int i = N; i > 0; i--) {
			int temp = array[0];
			array[0] = array[i];
			array[i] = temp;
			this.movements++;
			N = N - 1;
			maxHeap(0);
		}
		
		// now, convert array to array list
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < length; i++) {
			list.add(array[i]);
		}
				
		// reverse order of list
		Collections.reverse(list);
				
		// now, copy list back to array
		for (int y = 0; y < list.size(); y++) {
			array[y] = list.get(y);
		}
	}
	
	// method to sort 20% through
	public void sort_20Percent() {
		// first, sort in order
		heapify();
				
		for (int i = N; i > 0; i--) {
			int temp = array[0];
			array[0] = array[i];
			array[i] = temp;
			this.movements++;
			N = N - 1;
			maxHeap(0);
		}
	
		// now, convert array to array list
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < length; i++) {
			list.add(array[i]);
		}
								
		int min = 1;
						
		// now, add 200,000 random elements
		for (int z = length; z < 200000; z++) {
			list.add(z, min + (int)(Math.random() * ((length - min) + 1)));
		}
										
		// now, copy list back to array
		for (int y = 0; y < list.size(); y++) {
			array20PercentSorted[y] = list.get(y);
		}
	}
	
	// method to sort 80% through
	public void sort_80Percent() {
		// first, sort in order
		heapify();
						
		for (int i = N; i > 0; i--) {
			int temp = array[0];
			array[0] = array[i];
			array[i] = temp;
			this.movements++;
			N = N - 1;
			maxHeap(0);
		}
		
		// now, convert array to array list
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < length; i++) {
			list.add(array[i]);
		}
								
		int min = 1;
						
		// now, add 12,500 random elements
		for (int z = length; z < 12500; z++) {
			list.add(z, min + (int)(Math.random() * ((length - min) + 1)));
		}
										
		// now, copy list back to array
		for (int y = 0; y < list.size(); y++) {
			array80PercentSorted[y] = list.get(y);
		}
	}
	
	
	// setters
	public void setStartTime() {
		this.startTime = System.nanoTime();
	}
	
	public void setEndTime() {
		this.endTime = System.nanoTime();
	}
	
	// getters
	public long getComparisons() {
		return this.comparisons;
	}
	
	public long getMovements() {
		return this.movements;
	}
	
	public long getStartTime() {
		return this.startTime;
	}
	
	public long getEndTime() {
		return this.endTime;
	}
	
	public long getSortTime() {
		this.sortTime = TimeUnit.MILLISECONDS.convert(this.getEndTime() - this.getStartTime(), TimeUnit.NANOSECONDS);
		return this.sortTime;
	}
	
	public void getArray() {
		for (int element : array) {
			System.out.print(element + " ");
		}
	}
	
	// toString method
	public String toString() {
		return "\nHEAP SORT\nComparisons: " + this.getComparisons() + "\nMovements: "
				+ this.getMovements() + "\nSort time: " + this.getSortTime() + " milliseconds";
	}
}



class RadixSort {
	private long comparisons = 0;
	private long movements = 0;
	private long startTime = 0;
	private long endTime = 0;
	private long sortTime = 0;
	private int[] array = new int[50000];
	int length = array.length;
	private int[] array20PercentSorted = new int[250000];
	private int[] array80PercentSorted = new int[62500];
	
	// constructor
	RadixSort() {
		this.comparisons = 0;
		this.movements = 0;
		// initialize array
		for (int i = 0; i < length; i++) {
			int min = 1;
			array[i] = min + (int)(Math.random() * ((length - min) + 1));
		}
	}
	
	// method to get digit
	public static int getDigit(int value, int place) {
		return ((value/place) % 10);
	}
	
	// method to do counting sort in reference to exp (10, 100, etc.)
	public int[] countSort(int place) {
		// create output array
		int[] outputArray = new int[length];
		// create count array
		int[] count = new int[10];
		
		for (int i = 0; i < length; i++) {
			int digit = getDigit(array[i], place);
			count[digit]++;
		}
		
		for (int p = 1; p < count.length; p++) {
			count[p] += count[p-1];
		}
		
		for (int m = length - 1; m >= 0; m--) {
			int digit = getDigit(array[m], place);
			outputArray[count[digit]-1] = array[m];
			this.movements++;
			count[digit]--;
		}
		
		return outputArray;
	}
	
	// method to sort in order
	public void sortInOrder() {
		for (int place = 1; place <= 1000000000; place *= 10) {
			// count sort at each digit
			array = countSort(place);
		}
	}
	
	// method to reverse sorted array
	public void sortInReverseOrder() {
		// first, sort in order
		for (int place = 1; place <= 1000000000; place *= 10) {
			// count sort at each digit
			array = countSort(place);
		}
		
		// now, convert array to array list
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < length; i++) {
			list.add(array[i]);
		}
		
		// reverse order of list
		Collections.reverse(list);
		
		// now, copy list back to array
		for (int y = 0; y < list.size(); y++) {
			array[y] = list.get(y);
		}
	}
	
	// method to sort 20% through
	public void sort_20Percent() {
		// first, sort in order
		for (int place = 1; place <= 1000000000; place *= 10) {
			// count sort at each digit
			array = countSort(place);
		}
	
		// now, convert array to array list
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < length; i++) {
			list.add(array[i]);
		}
								
		int min = 1;
						
		// now, add 200,000 random elements
		for (int z = length; z < 200000; z++) {
			list.add(z, min + (int)(Math.random() * ((length - min) + 1)));
		}
										
		// now, copy list back to array
		for (int y = 0; y < list.size(); y++) {
			array20PercentSorted[y] = list.get(y);
		}
	}
	
	// method to sort 20% through
	public void sort_80Percent() {
		// first, sort in order
		for (int place = 1; place <= 1000000000; place *= 10) {
			// count sort at each digit
			array = countSort(place);
		}

		// now, convert array to array list
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < length; i++) {
			list.add(array[i]);
		}
								
		int min = 1;
						
		// now, add 12,500 random elements
		for (int z = length; z < 12500; z++) {
			list.add(z, min + (int)(Math.random() * ((length - min) + 1)));
		}
										
		// now, copy list back to array
		for (int y = 0; y < list.size(); y++) {
			array80PercentSorted[y] = list.get(y);
		}
		
	}
	
	// setters
	public void setStartTime() {
		this.startTime = System.nanoTime();
	}
	
	public void setEndTime() {
		this.endTime = System.nanoTime();
	}
	
	// getters
	public long getComparisons() {
		return this.comparisons;
	}
	
	public long getMovements() {
		return this.movements;
	}
	
	public long getStartTime() {
		return this.startTime;
	}
	
	public long getEndTime() {
		return this.endTime;
	}
	
	public long getSortTime() {
		this.sortTime = TimeUnit.MILLISECONDS.convert(this.getEndTime() - this.getStartTime(), TimeUnit.NANOSECONDS);
		return this.sortTime;
	}
	
	public void getArray() {
		for (int element : array) {
			System.out.print(element + " ");
		}
	}
	
	// toString method
	public String toString() {
		return "\nRADIX SORT\nComparisons: " + this.getComparisons() + "\nMovements: "
				+ this.getMovements() + "\nSort time: " + this.getSortTime() + " milliseconds";
	}
}
