// Performs a radix sort on the data.


class RadixSort {
	private long comparisons = 0;
	private long movements = 0;
	private long startTime = 0;
	private long endTime = 0;
	private long sortTime = 0;
	private int[] array = new int[50000];
	int length = array.length;
	private int[] array20PercentSorted = new int[250000];
	private int[] array80PercentSorted = new int[62500];
	
	// constructor
	RadixSort() {
		this.comparisons = 0;
		this.movements = 0;
		// initialize array
		for (int i = 0; i < length; i++) {
			int min = 1;
			array[i] = min + (int)(Math.random() * ((length - min) + 1));
		}
	}
	
	// method to get digit
	public static int getDigit(int value, int place) {
		return ((value/place) % 10);
	}
	
	// method to do counting sort in reference to exp (10, 100, etc.)
	public int[] countSort(int place) {
		// create output array
		int[] outputArray = new int[length];
		// create count array
		int[] count = new int[10];
		
		for (int i = 0; i < length; i++) {
			int digit = getDigit(array[i], place);
			count[digit]++;
		}
		
		for (int p = 1; p < count.length; p++) {
			count[p] += count[p-1];
		}
		
		for (int m = length - 1; m >= 0; m--) {
			int digit = getDigit(array[m], place);
			outputArray[count[digit]-1] = array[m];
			this.comparisons++;
			this.movements++;
			count[digit]--;
		}
		
		return outputArray;
	}
	
	// method to sort in order
	public void sortInOrder() {
		for (int place = 1; place <= 1000000000; place *= 10) {
			// count sort at each digit
			array = countSort(place);
		}
	}
	
	// method to reverse sorted array
	public void sortInReverseOrder() {
		// first, sort in order
		for (int place = 1; place <= 1000000000; place *= 10) {
			// count sort at each digit
			array = countSort(place);
		}
		
		// now, convert array to array list
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < length; i++) {
			list.add(array[i]);
		}
		
		// reverse order of list
		Collections.reverse(list);
		
		// now, copy list back to array
		for (int y = 0; y < list.size(); y++) {
			array[y] = list.get(y);
		}
	}
	
	// method to sort 20% through
	public void sort_20Percent() {
		// first, sort in order
		for (int place = 1; place <= 1000000000; place *= 10) {
			// count sort at each digit
			array = countSort(place);
		}
	
		// now, convert array to array list
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < length; i++) {
			list.add(array[i]);
		}
								
		int min = 1;
						
		// now, add 200,000 random elements
		for (int z = length; z < 200000; z++) {
			list.add(z, min + (int)(Math.random() * ((length - min) + 1)));
		}
										
		// now, copy list back to array
		for (int y = 0; y < list.size(); y++) {
			array20PercentSorted[y] = list.get(y);
		}
	}
	
	// method to sort 20% through
	public void sort_80Percent() {
		// first, sort in order
		for (int place = 1; place <= 1000000000; place *= 10) {
			// count sort at each digit
			array = countSort(place);
		}

		// now, convert array to array list
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < length; i++) {
			list.add(array[i]);
		}
								
		int min = 1;
						
		// now, add 12,500 random elements
		for (int z = length; z < 12500; z++) {
			list.add(z, min + (int)(Math.random() * ((length - min) + 1)));
		}
										
		// now, copy list back to array
		for (int y = 0; y < list.size(); y++) {
			array80PercentSorted[y] = list.get(y);
		}
		
	}
	
	// setters
	public void setStartTime() {
		this.startTime = System.nanoTime();
	}
	
	public void setEndTime() {
		this.endTime = System.nanoTime();
	}
	
	// getters
	public long getComparisons() {
		return this.comparisons;
	}
	
	public long getMovements() {
		return this.movements;
	}
	
	public long getStartTime() {
		return this.startTime;
	}
	
	public long getEndTime() {
		return this.endTime;
	}
	
	public long getSortTime() {
		this.sortTime = TimeUnit.MILLISECONDS.convert(this.getEndTime() - this.getStartTime(), TimeUnit.NANOSECONDS);
		return this.sortTime;
	}
	
	public void getArray() {
		for (int element : array) {
			System.out.print(element + " ");
		}
	}
	
	// toString method
	public String toString() {
		return "\nRADIX SORT\nComparisons: " + this.getComparisons() + "\nMovements: "
				+ this.getMovements() + "\nSort time: " + this.getSortTime() + " milliseconds";
	}
}
